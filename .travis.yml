language: cpp
sudo: false

matrix:
  include:
    - os: linux
      services:
        - docker
      env:
        - PLATFORM=alpine
        - PARALLEL="$(nproc)"
        - STATIC_LINK=ON
    - os: linux
      services:
        - docker
      env:
        - PLATFORM=alpine
        - PARALLEL="$(nproc)"
        - STATIC_LINK=OFF
    - os: osx
      addons:
        homebrew:
          packages:
            - cmake
            - llvm
            - boost
            - mbedtls
            - libsodium
            - libmaxminddb
            - rapidjson
      env:
        - PLATFORM=osx
        - STATIC_LINK=ON
        - PARALLEL="$(sysctl -n hw.physicalcpu)"
    - os: osx
      addons:
        homebrew:
          packages:
            - cmake
            - llvm
            - boost
            - mbedtls
            - libsodium
            - libmaxminddb
            - rapidjson
      env:
        - PLATFORM=osx
        - STATIC_LINK=ON
        - PARALLEL="$(sysctl -n hw.physicalcpu)"

install:
  - |
    if [[ "${PLATFORM}" = "alpine" ]]; then
      docker build --rm --no-cache -t pichi/builder -f docker/builder.dockerfile .
    fi

script:
  - mkdir -p build
  - cd build
  - |
    case "${PLATFORM}" in
      "alpine")
        docker run --rm -v "${TRAVIS_BUILD_DIR}:/root/pichi" -w /root/pichi/build \
          pichi/builder cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DSTATIC_LINK="${STATIC_LINK}" \
          /root/pichi &&
        docker run --rm -v "${TRAVIS_BUILD_DIR}:/root/pichi" -w /root/pichi/build \
          pichi/builder make -j "${PARALLEL}" &&
        docker run --rm -v "${TRAVIS_BUILD_DIR}:/root/pichi" -w /root/pichi/build \
          pichi/builder ctest --output-on-failure;;
      "osx")
        cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DSTATIC_LINK="${STATIC_LINK}" \
          -DCMAKE_CXX_COMPILER="$(brew --prefix)/opt/llvm/bin/clang++" \
          "${TRAVIS_BUILD_DIR}" &&
        make -j "${PARALLEL}" &&
        ctest --output-on-failure;;
    esac

notifications:
  email: false
