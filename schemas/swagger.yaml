openapi: 3.0.0
info:
  version: "1.1"
  title: 'Pichi API'
  description: 'RESTful API for pichi server'
tags:
  - name: 'Pichi API'
    description: 'Pichi API'
paths:
  /ingresses:
    get:
      description: 'Get all available ingresses'
      tags:
        - 'Pichi API'
      responses:
        '200':
          description: 'All available ingresses'
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/Ingress'
        '500':
          description: 'Pichi server data structure error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /ingresses/{name}:
    put:
      description: 'Create or modify an ingress'
      tags:
        - 'Pichi API'
      parameters:
        - name: name
          description: 'Ingress name'
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ingress'
      responses:
        '204':
          description: 'Operation succeeded'
        '400':
          description: 'Request body is invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: 'JSON semantic error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '423':
          description: 'Address in use'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      description: 'Delete a specified ingress'
      tags:
        - 'Pichi API'
      parameters:
        - name: name
          description: 'Ingress name'
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'operation succeeded'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /egresses:
    get:
      description: 'Get all available egresses'
      tags:
        - 'Pichi API'
      responses:
        '200':
          description: 'All available ingresses'
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/Egress'
        '500':
          description: 'Pichi server data structure error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /egresses/{name}:
    put:
      description: 'Create or modify an egress'
      tags:
        - 'Pichi API'
      parameters:
        - name: name
          description: 'egress name'
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Egress'
      responses:
        '204':
          description: 'Operation succeeded'
        '400':
          description: 'Request body is invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: 'JSON semantic error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      description: 'Delete a specified egress'
      tags:
        - 'Pichi API'
      parameters:
        - name: name
          description: 'Egress name'
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'operation succeeded'
        '403':
          description: 'Egress is used by route'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /rules:
    get:
      description: 'Get all available rules'
      tags:
        - 'Pichi API'
      responses:
        '200':
          description: 'All available rules'
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/Rule'
        '500':
          description: 'Pichi server data structure error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /rules/{name}:
    put:
      description: 'Create or modify a rule'
      tags:
        - 'Pichi API'
      parameters:
        - name: name
          description: 'rule name'
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
      responses:
        '204':
          description: 'Operation succeeded'
        '400':
          description: 'Request body is invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: 'JSON semantic error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      description: 'Delete a specified rule'
      tags:
        - 'Pichi API'
      parameters:
        - name: name
          description: 'Rule name'
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'operation succeeded'
        '403':
          description: 'Rule is used by route'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /route:
    get:
      description: 'Show Pichi routes'
      tags:
        - 'Pichi API'
      responses:
        '200':
          description: 'Routes'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '500':
          description: 'Pichi server data structure error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      description: 'Change rule order or default egress'
      tags:
        - 'Pichi API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '204':
          description: 'Operation succeeded'
        '400':
          description: 'Request body is invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: 'JSON semantic error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
components:
  schemas:
    ErrorMessage:
      type: object
      properties:
        message:
          type: string
          example: 'Error message in detail'
    AdapterType:
      type: string
      enum:
        - http
        - socks5
        - ss
    CryptoMethod:
      description: 'SS method'
      type: string
      enum:
        - rc4-md5
        - bf-cfb
        - aes-128-ctr
        - aes-192-ctr
        - aes-256-ctr
        - aes-128-cfb
        - aes-192-cfb
        - aes-256-cfb
        - camellia-128-cfb
        - camellia-192-cfb
        - camellia-256-cfb
        - chacha20
        - salsa20
        - chacha20-ietf
        - aes-128-gcm
        - aes-192-gcm
        - aes-256-gcm
        - chacha20-ietf-poly1305
        - xchacha20-ietf-poly1305
    Adapter:
      type: object
      properties:
        port:
          description: 'Ingress binding port'
          type: integer
          format: int32
          example: 8388
        method:
          $ref: '#/components/schemas/CryptoMethod'
        password:
          description: 'SS psk'
          type: string
          example: 'ss password'
      required:
        - port
    Ingress:
      allOf:
        - $ref: '#/components/schemas/Adapter'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/AdapterType'
            bind:
              description: 'Ingress binding address'
              type: string
              example: '0.0.0.0'
          required:
            - type
            - bind
    Egress:
      allOf:
        - $ref: '#/components/schemas/Adapter'
        - type: object
          properties:
            type:
              allOf:
                - type: string
                  enum:
                    - direct
                    - reject
                - $ref: '#/components/schemas/AdapterType'
            host:
              type: string
              description: 'Remote server address'
              example: 'socks5.example.com'
          required:
            - type
            - host
    Rule:
      type: object
      properties:
        range:
          description: 'IP range array'
          type: array
          items:
            type: string
            example: 'fc00::/7'
        ingress_name:
          description: 'ingress name array'
          type: array
          items:
            type: string
            example: 'my_socks5_server'
        ingress_type:
          description: 'ingress type array'
          type: array
          items:
            $ref: '#/components/schemas/AdapterType'
        pattern:
          description: 'Remote server address pattern'
          type: array
          items:
            type: string
            example: '^.*\.example.com$'
        domain:
          description: 'Remote server domain name'
          type: array
          items:
            type: string
            example: 'example.com'
        country:
          description: 'Remote server country'
          type: array
          items:
            type: string
            example: 'US'
    Route:
      type: object
      properties:
        default:
          description: 'Default egress name'
          type: string
          example: 'default_egress'
        rules:
          description: 'Active rules in order'
          type: array
          items:
            type: array
            minLength: 2
            maxLength: 2
            items:
              type: string
            example: ['rule_0', 'egress_0']
