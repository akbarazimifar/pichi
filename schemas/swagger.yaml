openapi: 3.0.0
info:
  version: "1.4"
  title: 'Pichi API'
  description: 'RESTful API for pichi server'
tags:
  - name: 'Pichi API'
    description: 'Pichi API'
paths:
  /ingresses:
    get:
      description: 'Get all available ingresses'
      tags:
        - 'Pichi API'
      responses:
        '200':
          description: 'All available ingresses'
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/Ingress'
        '500':
          description: 'Pichi server data structure error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /ingresses/{name}:
    put:
      description: 'Create or modify an ingress'
      tags:
        - 'Pichi API'
      parameters:
        - name: name
          description: 'Ingress name'
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ingress'
      responses:
        '204':
          description: 'Operation succeeded'
        '400':
          description: 'Request body is invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: 'JSON semantic error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '423':
          description: 'Address in use'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      description: 'Delete a specified ingress'
      tags:
        - 'Pichi API'
      parameters:
        - name: name
          description: 'Ingress name'
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'operation succeeded'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /egresses:
    get:
      description: 'Get all available egresses'
      tags:
        - 'Pichi API'
      responses:
        '200':
          description: 'All available ingresses'
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/Egress'
        '500':
          description: 'Pichi server data structure error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /egresses/{name}:
    put:
      description: 'Create or modify an egress'
      tags:
        - 'Pichi API'
      parameters:
        - name: name
          description: 'egress name'
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Egress'
      responses:
        '204':
          description: 'Operation succeeded'
        '400':
          description: 'Request body is invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: 'JSON semantic error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      description: 'Delete a specified egress'
      tags:
        - 'Pichi API'
      parameters:
        - name: name
          description: 'Egress name'
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'operation succeeded'
        '403':
          description: 'Egress is used by route'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /rules:
    get:
      description: 'Get all available rules'
      tags:
        - 'Pichi API'
      responses:
        '200':
          description: 'All available rules'
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/Rule'
        '500':
          description: 'Pichi server data structure error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /rules/{name}:
    put:
      description: 'Create or modify a rule'
      tags:
        - 'Pichi API'
      parameters:
        - name: name
          description: 'rule name'
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
      responses:
        '204':
          description: 'Operation succeeded'
        '400':
          description: 'Request body is invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: 'JSON semantic error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      description: 'Delete a specified rule'
      tags:
        - 'Pichi API'
      parameters:
        - name: name
          description: 'Rule name'
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'operation succeeded'
        '403':
          description: 'Rule is used by route'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /route:
    get:
      description: 'Show Pichi routes'
      tags:
        - 'Pichi API'
      responses:
        '200':
          description: 'Routes'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '500':
          description: 'Pichi server data structure error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      description: 'Change rule order or default egress'
      tags:
        - 'Pichi API'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '204':
          description: 'Operation succeeded'
        '400':
          description: 'Request body is invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: 'JSON semantic error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: 'Pichi server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
components:
  schemas:
    IngressType:
      type: string
      enum:
        - http
        - socks5
        - ss
        - tunnel
        - trojan
        - vmess
    ShadowsocksMethod:
      description: 'SS method'
      type: string
      enum:
        - rc4-md5
        - bf-cfb
        - aes-128-ctr
        - aes-192-ctr
        - aes-256-ctr
        - aes-128-cfb
        - aes-192-cfb
        - aes-256-cfb
        - camellia-128-cfb
        - camellia-192-cfb
        - camellia-256-cfb
        - chacha20
        - salsa20
        - chacha20-ietf
        - aes-128-gcm
        - aes-192-gcm
        - aes-256-gcm
        - chacha20-ietf-poly1305
        - xchacha20-ietf-poly1305
    VMessSecurity:
      description: 'The security option for VMess protocol'
      type: string
      enum:
        - auto
        - none
        - chacha20-poly1305
        - aes-128-gcm
    Endpoint:
      description: 'The endpoint object'
      type: object
      properties:
        host:
          description: 'Host name or IP(v4/v6) address'
          type: string
          example: 'example.com'
        port:
          description: 'TCP port'
          type: integer
          format: int32
          minimum: 1
          maximum: 65535
          example: 8388
      required:
        - host
        - port
    Bind:
      description: 'Bind option of ingress'
      type: object
      properties:
        bind:
          description: 'Binding endpoints'
          type: array
          items:
            $ref: '#/components/schemas/Endpoint'
          minLength: 1
      required:
        - bind
    Server:
      description: 'Server option of egress'
      type: object
      properties:
        server:
          $ref: '#/components/schemas/Endpoint'
      required:
        - server
    ShadowsocksOption:
      description: 'The extra options for Shadowsocks Adapter'
      type: object
      properties:
        password:
          description: 'Shadowsocks password'
          type: string
          example: 'ss password'
        method:
          $ref: '#/components/schemas/ShadowsocksMethod'
      required:
        - password
        - method
    TunnelOption:
      description: 'The extra options for Tunnel ingress'
      type: object
      properties:
        destinations:
          description: 'Destination endpoints'
          type: array
          items:
            $ref: '#/components/schemas/Endpoint'
          minLength: 1
        balance:
          description: 'Tunnel balance type'
          type: string
          enum:
            - random
            - round-robin
            - least-conn
      required:
        - destinations
        - balance
    RejectOption:
      description: 'The extra options for Reject egress'
      type: object
      properties:
        mode:
          description: 'Reject mode'
          type: string
          enum:
            - fixed
            - random
        delay:
          description: 'Dealy seconds to reject the connection'
          type: integer
          format: int32
          minimum: 0
          maximum: 300
          default: 0
      required:
        - mode
    TlsForIngress:
      description: 'TLS options for ingress'
      type: object
      properties:
        cert_file:
          description: 'The file path of certificate'
          type: string
          example: '/etc/letsencrypt/live/example.com/fullchain.pem'
        key_file:
          description: 'The file path of private key'
          type: string
          example: '/etc/letsencrypt/live/example.com/privkey.pem'
      required:
        - cert_file
        - key_file
    TlsForEgress:
      description: 'TLS options for egress'
      type: object
      properties:
        insecure:
          description: 'Wether to verify the TLS certificate'
          type: boolean
          default: false
        ca_file:
          description: 'The file path of CA certificate'
          type: string
          example: '/etc/cert/rootCA.pem'
        server_name:
          description: 'The server name used to verify the certificate'
          type: string
          example: 'example.com'
        sni:
          description: 'SNI extension field of TLS'
          type: string
          example: 'example.com'
      required:
        - insecure
    WebsocketOption:
      description: 'Websocket options for Trojan/VMess adapter'
      type: object
      properties:
        path:
          description: 'Websocket URI path'
          type: string
          example: '/path'
        host:
          description: 'HOST field in HTTP header'
          type: string
          example: 'example.com'
      required:
        - path
    HttpSocks5Credential:
      description: 'Credential object for Http/Socks5 adapter'
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    TojanCredential:
      description: 'Credential object for Trojan adapter'
      type: object
      properties:
        password:
          type: string
      required:
        - password
    VMessCredential:
      description: 'Credential object for VMess adapter'
      type: object
      properties:
        uuid:
          description: 'VMess UUID string'
          type: string
          example: 'f2096007-5315-49dd-a623-1d3ed7ab891c'
        alter_id:
          description: 'The number of extra alternative IDs'
          type: integer
          format: int32
          minimum: 0
          maximum: 65535
          example: 4
        security:
          $ref: '#/components/schemas/VMessSecurity'
      required:
        - uuid
        - alter_id
    ShadowsocksAdapter:
      description: 'Shadowsocks ingress object'
      type: object
      properties:
        type:
          type: string
          enum:
            - ss
        option:
          $ref: '#/components/schemas/ShadowsocksOption'
      required:
        - type
        - option
    TunnelIngress:
      description: 'Tunnel ingress object'
      type: object
      properties:
        type:
          type: string
          enum:
            - tunnel
        option:
          $ref: '#/components/schemas/TunnelOption'
      required:
        - type
        - option
    HttpSocks5Ingress:
      description: "HTTP/Socks5 ingress object"
      type: object
      properties:
        type:
          type: string
          enum:
            - http
            - socks5
        credentials:
          type: array
          items:
            $ref: '#/components/schemas/HttpSocks5Credential'
        tls:
          $ref: '#/components/schemas/TlsForIngress'
      required:
        - type
    TrojanIngress:
      description: "Trojan ingress object"
      type: object
      properties:
        type:
          type: string
          enum:
            - trojan
        option:
          description: "The extra options for Trojan ingress"
          type: object
          properties:
            remote:
              $ref: '#/components/schemas/Endpoint'
          required:
            - remote
        credentials:
          type: array
          items:
            $ref: '#/components/schemas/TojanCredential'
          minLength: 1
        tls:
          $ref: '#/components/schemas/TlsForIngress'
        websocket:
          $ref: '#/components/schemas/WebsocketOption'
      required:
        - type
        - option
        - credentials
        - tls
    VMessIngress:
      description: 'VMess ingress object'
      type: object
      properties:
        type:
          type: string
          enum:
            - vmess
        credentials:
          type: array
          items:
            $ref: '#/components/schemas/VMessCredential'
          minLength: 1
        tls:
          $ref: '#/components/schemas/TlsForIngress'
        websocket:
          $ref: '#/components/schemas/WebsocketOption'
      required:
        - type
        - credentials
    DirectEgress:
      description: "Direct egress object"
      type: object
      properties:
        type:
          type: string
          enum:
            - direct
      required:
        - type
    RejectEgress:
      description: 'Reject egress object'
      type: object
      properties:
        type:
          type: string
          enum:
            - reject
        option:
          $ref: '#/components/schemas/RejectOption'
      required:
        - type
    HttpSocks5Egress:
      description: 'HTTP/Socks5 egress object'
      type: object
      properties:
        type:
          type: string
          enum:
            - http
            - socks5
        credential:
          $ref: '#/components/schemas/HttpSocks5Credential'
        tls:
          $ref: '#/components/schemas/TlsForEgress'
      required:
        - type
    TrojanEgress:
      description: 'Trojan egress object'
      type: object
      properties:
        type:
          type: string
          enum:
            - trojan
        credential:
          $ref: '#/components/schemas/TojanCredential'
        tls:
          $ref: '#/components/schemas/TlsForEgress'
        websocket:
          $ref: '#/components/schemas/WebsocketOption'
      required:
        - type
        - credential
        - tls
    VMessEgress:
      description: 'VMess egress object'
      type: object
      properties:
        type:
          type: string
          enum:
            - vmess
        credential:
          $ref: '#/components/schemas/VMessCredential'
        tls:
          $ref: '#/components/schemas/TlsForEgress'
        websocket:
          $ref: '#/components/schemas/WebsocketOption'
      required:
        - type
        - credential
    ProxyEgress:
      description: 'Proxy egress object'
      type: object
      allOf:
        - $ref: '#/components/schemas/Server'
        - oneOf:
          - $ref: '#/components/schemas/HttpSocks5Egress'
          - $ref: '#/components/schemas/ShadowsocksAdapter'
          - $ref: '#/components/schemas/TrojanEgress'
          - $ref: '#/components/schemas/VMessEgress'
    Ingress:
      description: 'Ingress object'
      type: object
      allOf:
        - $ref: '#/components/schemas/Bind'
        - oneOf:
          - $ref: '#/components/schemas/TunnelIngress'
          - $ref: '#/components/schemas/HttpSocks5Ingress'
          - $ref: '#/components/schemas/ShadowsocksAdapter'
          - $ref: '#/components/schemas/TrojanIngress'
          - $ref: '#/components/schemas/VMessIngress'
    Egress:
        oneOf:
          - $ref: '#/components/schemas/DirectEgress'
          - $ref: '#/components/schemas/RejectEgress'
          - $ref: '#/components/schemas/ProxyEgress'
    ErrorMessage:
      type: object
      properties:
        message:
          type: string
          example: 'Error message in detail'
    Rule:
      type: object
      properties:
        range:
          description: 'IP range array'
          type: array
          items:
            type: string
            example: 'fc00::/7'
        ingress_name:
          description: 'ingress name array'
          type: array
          items:
            type: string
            example: 'my_socks5_server'
        ingress_type:
          description: 'ingress type array'
          type: array
          items:
            $ref: '#/components/schemas/IngressType'
        pattern:
          description: 'Remote server address pattern'
          type: array
          items:
            type: string
            example: '^.*\.example.com$'
        domain:
          description: 'Remote server domain name'
          type: array
          items:
            type: string
            example: 'example.com'
        country:
          description: 'Remote server country'
          type: array
          items:
            type: string
            example: 'US'
    Route:
      type: object
      properties:
        default:
          description: 'Default egress name'
          type: string
          example: 'default_egress'
        rules:
          description: 'Active rules in order'
          type: array
          items:
            type: array
            minLength: 2
            items:
              type: string
            example: ['rule_0', 'rule_1', 'egress_0']