parameters:
  name: ''
  displayName: ''
  vmImage: ''
  platform: ''

jobs:
  - job: ${{ parameters.name }}
    displayName: ${{ parameters.displayName }}
    pool:
      vmImage: ${{ parameters.vmImage }}
    variables:
      - name: WORKSPACE
        value: $(Agent.TempDirectory)/deps
      - ${{ if eq(parameters.platform, 'android') }}:
        - name: TOOLCHAIN
          value: $(Agent.TempDirectory)/toolchain
        - name: SYSROOT
          value: $(Agent.TempDirectory)/toolchain/sysroot
        - name: GENERATOR
          value: Unix Makefiles
      - ${{ if eq(parameters.platform, 'ios') }}:
        - name: SYSROOT
          value: $(Agent.TempDirectory)/sysroot
        - name: GENERATOR
          value: Xcode
    strategy:
      matrix:
        ${{ if eq(parameters.platform, 'android') }}:
          android_28_arm64:
            ARCH: 'arm64'
            PLATFORM: 'android-28'
          android_28_x64:
            ARCH: 'x86_64'
            PLATFORM: 'android-28'
          android_24_arm64:
            ARCH: 'arm64'
            PLATFORM: 'android-24'
          android_24_x64:
            ARCH: 'x86_64'
            PLATFORM: 'android-24'
        ${{ if eq(parameters.platform, 'ios') }}:
          iphoneos:
            ARCH: 'arm64'
            PLATFORM: 'iOS'
            BUILD_ARGS: '-- -sdk iphoneos'
          iphonesimulator:
            ARCH: 'x86_64'
            PLATFORM: 'iOS'
            BUILD_ARGS: '-- -sdk iphonesimulator'
          appletvos:
            ARCH: 'arm64'
            PLATFORM: 'tvOS'
            BUILD_ARGS: '-- -sdk appletvos'
          appletvsimulator:
            ARCH: 'x86_64'
            PLATFORM: 'tvOS'
            BUILD_ARGS: '-- -sdk appletvsimulator'
    steps:
      - ${{ if eq(parameters.platform, 'android') }}:
        - bash: |
            NDK_URL=https://dl.google.com/android/repository/android-ndk-r20b-linux-x86_64.zip
            NDK_ROOT=$(Agent.TempDirectory)/android-ndk-r20b
            NDK_ZIP=$(mktemp) && curl -LSsfo ${NDK_ZIP} ${NDK_URL} && \
            unzip -d $(Agent.TempDirectory) ${NDK_ZIP} && rm -f ${NDK_ZIP} && \
            bash ${NDK_ROOT}/build/tools/make-standalone-toolchain.sh \
              --arch=$(ARCH) --install-dir=${TOOLCHAIN} --platform=$(PLATFORM)
          displayName: "Prepare Android NDK"
        - bash: |
            function setvariable() {
              echo "##vso[task.setvariable variable=$1]$2"
            }
            setvariable PARALLEL $(nproc)
            args="-D CMAKE_SYSROOT=${SYSROOT}"
            args="$args -D CMAKE_INSTALL_PREFIX=${SYSROOT}"
            args="$args -D CMAKE_C_COMPILER=${TOOLCHAIN}/bin/clang"
            args="$args -D CMAKE_CXX_COMPILER=${TOOLCHAIN}/bin/clang++"
            args="$args -D CMAKE_BUILD_TYPE=Release"
            setvariable TOOLCHAIN_ARGS "$args"
            setvariable BUILD_ARGS ""
          displayName: "Setup Android NDK toolchain and its related variables"
      - ${{ if eq(parameters.platform, 'ios') }}:
        - bash: |
            function setvariable() {
              echo "##vso[task.setvariable variable=$1]$2"
            }
            setvariable PARALLEL $(sysctl -n hw.physicalcpu)
            args="-D CMAKE_SYSTEM_NAME=${PLATFORM}"
            args="$args -D CMAKE_INSTALL_PREFIX=${SYSROOT}"
            args="$args -D CMAKE_SYSROOT=${SYSROOT}"
            setvariable TOOLCHAIN_ARGS "$args"
          displayName: "Setup variables for iOS"
      - bash: mkdir -p ${WORKSPACE}
        displayName: "Prepare workspace"
      - template: ./build-dep.yml
        parameters:
          name: boost
          url: https://dl.bintray.com/boostorg/release/1.73.0/source/boost_1_73_0.tar.gz
          dir: boost_1_73_0
          ws: $(WORKSPACE)
      - template: ./build-dep.yml
        parameters:
          name: libmaxminddb
          url: https://github.com/maxmind/libmaxminddb/releases/download/1.3.0/libmaxminddb-1.3.0.tar.gz
          dir: libmaxminddb-1.3.0
          ws: $(WORKSPACE)
          generator: $(GENERATOR)
          buildArgs: $(BUILD_ARGS)
      - template: ./build-dep.yml
        parameters:
          name: libsodium
          url: https://github.com/jedisct1/libsodium/releases/download/1.0.12/libsodium-1.0.12.tar.gz
          dir: libsodium-1.0.12
          ws: $(WORKSPACE)
          generator: $(GENERATOR)
          buildArgs: $(BUILD_ARGS)
      - template: ./build-dep.yml
        parameters:
          name: mbedtls
          url: https://tls.mbed.org/download/mbedtls-2.7.0-apache.tgz
          dir: mbedtls-2.7.0
          ws: $(WORKSPACE)
          generator: $(GENERATOR)
          buildArgs: $(BUILD_ARGS)
      - template: ./build-dep.yml
        parameters:
          name: rapidjson
          url: https://github.com/Tencent/rapidjson/archive/v1.1.0.tar.gz
          dir: rapidjson-1.1.0
          ws: $(WORKSPACE)
      - template: ./cmake.yml
        parameters:
          name: Pichi
          buildTarget: install
          arguments: $(TOOLCHAIN_ARGS) -D ENABLE_TLS=OFF -D BUILD_TEST=OFF -D BUILD_SERVER=OFF -D STATIC_LINK=ON -D INSTALL_DEVEL=ON
          cwd: $(Build.BinariesDirectory)
          src: $(Build.SourcesDirectory)
          generator: $(GENERATOR)
          buildArgs: $(BUILD_ARGS)
